plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.3'
    id 'io.spring.dependency-management' version '1.1.5'
}

group = 'com.hpvvssalesautomation'
version = '0.1.0'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.flywaydb:flyway-core:10.17.0'
    implementation 'org.flywaydb:flyway-database-postgresql:10.17.0'
    implementation 'org.apache.commons:commons-csv:1.11.0'

    implementation 'org.postgresql:postgresql'

    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:postgresql'
    testImplementation 'com.h2database:h2:2.2.224'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation 'io.swagger.parser.v3:swagger-parser-v3:2.1.20'
}

tasks.named('test') {
    useJUnitPlatform()
}

configurations.all {
    resolutionStrategy {
        eachDependency { DependencyResolveDetails details ->
            if (details.requested.group == 'org.apache.logging.log4j') {
                details.useVersion '2.23.1'
            }
        }
    }
}

tasks.register('runSeed', JavaExec) {
    group = 'application'
    description = 'Load fixture data into the configured database.'
    mainClass = 'com.hpvvssalesautomation.SeedApplication'
    classpath = sourceSets.main.runtimeClasspath
    jvmArgs = [
            "-Dfixtures.dir=" + (project.findProperty('fixturesDir') ?: project.rootProject.projectDir.parent + '/fixtures')
    ]
}
